Network sockets
  Write a program that binds itself to a specific address and port and will listen for incoming TCP comms (a server)
  
  import socket

SRV_ADDR = input("Type the server IP address: ")
SRV_PORT = int(input("Type the server port: "))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((SRV_ADDR, SRV_PORT))
s.listen(1)
print("Server started! Waiting for connections...")
connection, address = s.accept()
print('Client connected with address:', address)
while 1:
    data = connection.recv(1024)
    if not data: break
    connection.sendall(b'-- Message Received --\n')
    print(data.decode('utf-8'))
connection.close()

Here we create a new socket using the default family socket (AF_INET) that uses TCP and the default socket type connection-oriented(SOCK_STREAM)
The program will then print a message showing the address of the connected client and then will start an infinite loop in order to get and print all the messages received from it
Once the socket is configured, we print a message saying that the server is up. Then we use the accept function to accept incoming connections. This function returns two values:
  connection:the socket object we use to send and receive data
  address: it contains the client address bound to the socket
  
 The bind function binds the socket to the provided address and port, while the listen function instrusts the socket to listen for an incoming connection
 The argument 1 specifies the maximum number of queued connections
 
 Port Scanner
  Script takes an IP address and a port range and verifies if the provided ports are open or not
  Instead of using the connect() function we are going to use the connect_ex() function, which returns 0 if the operation succeeded, otherwise an error
